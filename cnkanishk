socket_client.py
import socket
def client_program():
    host =  socket.gethostname()  # as both code is running on same pc
    port = 9996 # socket server port number

    client_socket = socket.socket()  # instantiate
    client_socket.connect((host, port))  # connect to the server

    data = input("Get mac from server or post to server(enter either get or post)")  # take input
    client_socket.send(data.encode('utf-8'))
    
    if(data=="get"):
        ipadd = input("Enter the ip address")
        client_socket.send(ipadd.encode('utf-8'))  # send message
        #data = client_socket.recv(1024).decode()  # receive response
        mac_add = client_socket.recv(1024).decode('utf8')  # receive response
        print(mac_add);
    elif(data=="post"):
        ipadd = input("Enter the ip address")
        client_socket.send(ipadd.encode('utf-8'))  # send message
        macadd = input("Enter the mac address")
        client_socket.send(macadd.encode('utf-8'))  # send message
        mac_ip = client_socket.recv(1024).decode('utf8')
        print(mac_ip);
    else:
        print("enter either get or post")
    client_socket.close()  # close the connection


if __name__ == '__main__':
    client_program()

socket_server.py
import socket


def server_program():
    mac_table = {
   "192.168.127.1": "00:0C:42:A9:95:8B",
   "192.168.127.3": "10:93:E9:09:50:04",
   "192.168.127.34": "18:B4:30:05:CA:3C",
   "192.168.127.13": "28:CF:DA:05:5F:99",
   "192.168.2.1" : "3C:07:54:09:EC:CD" 
   }
    # get the hostname
    host = socket.gethostname()
    port = 9996  # initiate port no above 1024

    server_socket = socket.socket()  # get instance
    # look closely. The bind() function takes tuple as argument
    server_socket.bind((host, port))  # bind host address and port together

    # configure how many client the server can listen simultaneously
    server_socket.listen(2)
    conn, address = server_socket.accept()  # accept new connection
    print("Connection from: " + str(address))
    i = 1;
    while i==1:
        print('Connected to server')
        # receive data stream. it won't accept data packet greater than 1024 bytes
        
        data = conn.recv(1024).decode('utf8')
        if data == 'get':
            ipadd = conn.recv(1024).decode('utf8')
            mac_add = mac_table[ipadd]
            conn.send(mac_add.encode('utf-8'))  # send data to the client
            i=i+1
        elif data == 'post':
            ipadd = conn.recv(1024).decode('utf8')
            macadd = conn.recv(1024).decode('utf8')
            mac_table[ipadd] = macadd
            print(mac_table)
            i=i+1
        else:
            print("enter either get or post")
            conn.close()
            i=i+1
        

    conn.close()  # close the connection


if __name__ == '__main__':
    server_program()

IP ADDRESSING 
#function to determine the class of an Ip address
def findClass(ip):
    if(ip[0] >= 0 and ip[0] <= 127):
        return "A"
    
    elif(ip[0] >=128 and ip[0] <= 191):
        return "B"
    
    elif(ip[0] >= 192 and ip[0] <= 223):
        return "C"
    
    elif(ip[0] >= 224 and ip[0] <= 239):
        return "D"
    
    else:
        return "E"

#function to separate network and host id from the given ip address
def separate(ip, className):

    #for class A network
    if(className == "A"):
        print("Network Address is : ", ip[0])
        print("Host Address is : ", ".".join(ip[1:4]))
        print("Netmask is : 255.0.0.0")
    
    #for class B network
    elif(className == "B"):
        print("Network Address is : ", ".".join(ip[0:2]))
        print("Host Address is : ", ".".join(ip[2:4]))
        print("Netmask is : 255.255.0.0")
    
    #for class C network
    elif(className == "C"):
        print("Network Address is : ", ".".join(ip[0:3]))
        print("Host Address is : ", ip[3])
        print("Netmask is : 255.255.255.0")
    
    else:
        print("In this Class, IP address is not divided into Network and Host ID")

#function to check if its a special ip or not
def special_ip(ip):
    if(ip=='127.0.0.1' or ip=='0.0.0.0'):
        return 'y'
    elif(ip[0]>=224 and ip[0]<240):
        return 'y'
    else:
        return 'n'
    
    
#function to get host range   
def host_range(ip):
    return 256-(ip[3])
             
#driver's code
if __name__ == "__main__":
    ip = input("Enter the ip address in non-CDR notation \n")
    ip = ip.split(".")
    ip = [int(i) for i in ip]
        
    #checking special ip or not
    yn = special_ip(ip)
    if(yn=='y'):
        print("Its a special address ")
    else:
        print("Its not a special address")
         
    #getting host range
    hostrange = host_range(ip)
    print("Host range is : ",hostrange)
        
    
        
    #getting the network class
    networkClass = findClass(ip)
    print("Given IP address belongs to class : ", networkClass)
    if(networkClass=='A'):
        print("Broadcast address is : ",ip[0],".0.0.0")
    elif(networkClass=='B'):
        print("Broadcast address is : ",ip[0],".",ip[1],".0.0")
    elif(networkClass=='C'):
        print("Broadcast address is : ",ip[0],".",ip[1],".",ip[2],".0")
    else:
        print("Broadcast address : nil ")    
        
    #printing network and host id
    ip = [str(i) for i in ip]
    separate(ip, networkClass)
    
IP SUBNET CALCULATOR
import random
import sys

def subnet_calc():

    try:

        while True:
            # Take IP as input
            input_ip = input("\nEnter the IP address: ")

            # Validate the IP
            octet_ip = input_ip.split(".")
            #print octet_ip
            int_octet_ip = [int(i) for i in octet_ip]

            if (len(int_octet_ip) == 4) and \
                    (int_octet_ip[0] != 127) and \
                    (int_octet_ip[0] != 169) and  \
                    (0 <= int_octet_ip[1] <= 255) and \
                    (0 <= int_octet_ip[2] <=255) and \
                    (0 <= int_octet_ip[3] <= 255):
                break
            else:
                print ("Invalid IP, retry \n")
                continue

        # Predefine possible subnet masks
        masks = [0, 128, 192, 224, 240, 248, 252, 254, 255]
        while True:

            # Take subnet mask as input
            input_subnet = input("\nEnter the Subnet Mask: ")

            # Validate the subnet mask
            octet_subnet = [int(j) for j in input_subnet.split(".")]
            # print octet_subnet
            if (len(octet_subnet) == 4) and \
                    (octet_subnet[0] == 255) and \
                    (octet_subnet[1] in masks) and \
                    (octet_subnet[2] in masks) and \
                    (octet_subnet[3] in masks) and \
                    (octet_subnet[0] >= octet_subnet[1] >= octet_subnet[2] >= octet_subnet[3]):
                break
            else:
                print ("Invalid subnet mask, retry\n")
                continue

# Converting IP and subnet to binary

        ip_in_binary = []

        # Convert each IP octet to binary
        ip_in_bin_octets = [bin(i).split("b")[1] for i in int_octet_ip]

        # make each binary octet of 8 bit length by padding zeros
        for i in range(0,len(ip_in_bin_octets)):
            if len(ip_in_bin_octets[i]) < 8:
                padded_bin = ip_in_bin_octets[i].zfill(8)
                ip_in_binary.append(padded_bin)
            else:
                ip_in_binary.append(ip_in_bin_octets[i])

        # join the binary octets
        ip_bin_mask = "".join(ip_in_binary)

        # print ip_bin_mask

        sub_in_bin = []

        # convert each subnet octet to binary
        sub_bin_octet = [bin(i).split("b")[1] for i in octet_subnet]

        # make each binary octet of 8 bit length by padding zeros
        for i in sub_bin_octet:
            if len(i) < 8:
                sub_padded = i.zfill(8)
                sub_in_bin.append(sub_padded)
            else:
                sub_in_bin.append(i)

        # print sub_in_bin
        sub_bin_mask = "".join(sub_in_bin)

        # calculating number of hosts
        no_zeros = sub_bin_mask.count("0")
        no_ones = 32 - no_zeros
        no_hosts = abs(2 ** no_zeros - 2)

        # Calculating wildcard mask
        wild_mask = []
        for i in octet_subnet:
            wild_bit = 255 - i
            wild_mask.append(wild_bit)

        wildcard = ".".join([str(i) for i in wild_mask])

        # Calculating the network and broadcast address
        network_add_bin = ip_bin_mask[:no_ones] + "0" * no_zeros
        broadcast_add_bin = ip_bin_mask[:no_ones] + "1" * no_zeros

        network_add_bin_octet = []
        broadcast_binoct = []

        [network_add_bin_octet.append(i) for i in [network_add_bin[j:j+8]
                                                   for j in range(0, len(network_add_bin), 8)]]
        [broadcast_binoct.append(i) for i in [broadcast_add_bin[j:j+8]
                                              for j in range(0,len(broadcast_add_bin),8)]]

        network_add_dec_final = ".".join([str(int(i,2)) for i in network_add_bin_octet])
        broadcast_add_dec_final = ".".join([str(int(i,2)) for i in broadcast_binoct])

        # Calculate the host IP range
        first_ip_host = network_add_bin_octet[0:3] + [(bin(int(network_add_bin_octet[3],2)+1).split("b")[1].zfill(8))]
        first_ip = ".".join([str(int(i,2)) for i in first_ip_host])

        last_ip_host = broadcast_binoct[0:3] + [bin(int(broadcast_binoct[3],2) - 1).split("b")[1].zfill(8)]
        last_ip = ".".join([str(int(i,2)) for i in last_ip_host])

        # print all the computed results
        print ("\nIP address : " + input_ip)
        print( "subnet mask: " + input_subnet)
        print ("number of hosts per subnet: {0}".format(str(no_hosts)))
        print( "number of mask bits: {0}".format(str(no_ones)))
        print( "The Network address: {0}".format(network_add_dec_final))
        print( "The Broadcast address: {0}".format(broadcast_add_dec_final))
        print ("IP address range: {0} - {1}".format(first_ip, last_ip))
        print ("Maximum number of subnets: " + str(2**abs(24 - no_ones)))
        list_ip = []

        print ("")
        # ask to generate a random ip in the range
        if input("Do you want to generate a random ip? [y/n]") == 'y':
            while True:
                randip = []

                # Check if the octet bit is same in first and last host address.
                # If same, append it. else generate random IP
                for i in range(0,len(first_ip_host)):
                    for j in range(0,len(last_ip_host)):
                        if i == j:
                            if first_ip_host[i] == last_ip_host[j]:
                                randip.append(int(first_ip_host[i],2))
                            else:
                                randip.append(random.randint(int(first_ip_host[i],2),int(last_ip_host[j],2)))

                random_ip_final = ".".join(str(i) for i in randip)

                # check if generated IP has already been printed. If so, compute again till unique IP is obtained
                if random_ip_final in list_ip:

                    # if all IPs in the host range are used, exit
                    if len(list_ip) == no_hosts:
                        print ("All IPs in the range used up, exiting\n")
                        break
                    continue

                else:
                    print (random_ip_final + '\n')

                list_ip.append(random_ip_final)
                print ("List of generated IPs:" , sorted(list_ip) ,'\n')

                if input("\nGenerate another random IP? [y/n]") == 'y':
                    continue
                else:
                    break

    except KeyboardInterrupt:
        print ("Interrupted by the User, exiting\n")
    except ValueError:
        print ("Seem to have entered an incorrect value, exiting\n")

# Calling the above defined function
if __name__ == '__main__':
    subnet_calc()


