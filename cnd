//Shankesh

import heapq

def dijkstra(graph, start):
    distances = {node: float('inf') for node in graph}
    distances[start] = 0
    heap = [(0, start)]
   
    while heap:
        (distance, current_node) = heapq.heappop(heap)
       
        if distance > distances[current_node]:
            continue
       
        for neighbor, weight in graph[current_node].items():
            distance_to_neighbor = distance + weight
           
            if distance_to_neighbor < distances[neighbor]:
                distances[neighbor] = distance_to_neighbor
                heapq.heappush(heap, (distance_to_neighbor, neighbor))
   
    return distances


# Example graph
graph = {
    'A': {'B': 4, 'C': 2},
    'B': {'A': 4, 'C': 1, 'D': 5},
    'C': {'A': 2, 'B': 1, 'D': 8, 'E': 10},
    'D': {'B': 5, 'C': 8, 'E': 2},
    'E': {'C': 10, 'D': 2}
}

# Starting node
start_node = 'A'

# Calculate shortest distances
shortest_distances = dijkstra(graph, start_node)

# Print table of shortest distances
print("Shortest distances from node", start_node)
print("-----------------------------")
print("Node\tDistance")
print("-----------------------------")
for node, distance in shortest_distances.items():
    print(node, "\t", distance)

//Pranav


import heapq


def dijkstra_shortest_path(graph, start, end):
    """
    Dijkstra's shortest path algorithm with path reconstruction.

    :param graph: a dictionary representing the graph in adjacency list format
    :param start: the starting node
    :param end: the ending node
    :return: a tuple containing the shortest distance and the path from start to end
    """
    # Initialize distances and parents
    distances = {node: float('inf') for node in graph}
    print(distances)
    parents = {node: None for node in graph}
    print(parents)
    distances[start] = 0

    # Initialize heap with start node
    heap = [(0, start)]

    # Dijkstra's algorithm
    while heap:
        current_distance, current_node = heapq.heappop(heap)

        # Stop if end node is reached
        if current_node == end:
            # Reconstruct path from parents dictionary
            path = []
            while current_node is not None:
                path.append(current_node)
                current_node = parents[current_node]
            path.reverse()
            return distances[end], path

        # Process neighboring nodes
        for neighbor, weight in graph[current_node].items():
            distance = current_distance + weight
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                parents[neighbor] = current_node
                heapq.heappush(heap, (distance, neighbor))

    # End node was not reached
    return float('inf'), None


graph = {
    'A': {'B': 1, 'D': 4},
    'B': {'A': 1, 'C': 3, 'D': 2},
    'C': {'B': 3, 'D': 5},
    'D': {'A': 4, 'B': 2, 'C': 5}
}
a = dijkstra_shortest_path(graph, 'A', 'D')
print(a)
