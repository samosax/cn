//Shankesh

import heapq

def dijkstra(graph, start):
    distances = {node: float('inf') for node in graph}
    distances[start] = 0
    heap = [(0, start)]
   
    while heap:
        (distance, current_node) = heapq.heappop(heap)
       
        if distance > distances[current_node]:
            continue
       
        for neighbor, weight in graph[current_node].items():
            distance_to_neighbor = distance + weight
           
            if distance_to_neighbor < distances[neighbor]:
                distances[neighbor] = distance_to_neighbor
                heapq.heappush(heap, (distance_to_neighbor, neighbor))
   
    return distances


# Example graph
graph = {
    'A': {'B': 4, 'C': 2},
    'B': {'A': 4, 'C': 1, 'D': 5},
    'C': {'A': 2, 'B': 1, 'D': 8, 'E': 10},
    'D': {'B': 5, 'C': 8, 'E': 2},
    'E': {'C': 10, 'D': 2}
}

# Starting node
start_node = 'A'

# Calculate shortest distances
shortest_distances = dijkstra(graph, start_node)

# Print table of shortest distances
print("Shortest distances from node", start_node)
print("-----------------------------")
print("Node\tDistance")
print("-----------------------------")
for node, distance in shortest_distances.items():
    print(node, "\t", distance)

//Pranav


import heapq


def dijkstra_shortest_path(graph, start, end):
    """
    Dijkstra's shortest path algorithm with path reconstruction.

    :param graph: a dictionary representing the graph in adjacency list format
    :param start: the starting node
    :param end: the ending node
    :return: a tuple containing the shortest distance and the path from start to end
    """
    # Initialize distances and parents
    distances = {node: float('inf') for node in graph}
    print(distances)
    parents = {node: None for node in graph}
    print(parents)
    distances[start] = 0

    # Initialize heap with start node
    heap = [(0, start)]

    # Dijkstra's algorithm
    while heap:
        current_distance, current_node = heapq.heappop(heap)

        # Stop if end node is reached
        if current_node == end:
            # Reconstruct path from parents dictionary
            path = []
            while current_node is not None:
                path.append(current_node)
                current_node = parents[current_node]
            path.reverse()
            return distances[end], path

        # Process neighboring nodes
        for neighbor, weight in graph[current_node].items():
            distance = current_distance + weight
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                parents[neighbor] = current_node
                heapq.heappush(heap, (distance, neighbor))

    # End node was not reached
    return float('inf'), None


graph = {
    'A': {'B': 1, 'D': 4},
    'B': {'A': 1, 'C': 3, 'D': 2},
    'C': {'B': 3, 'D': 5},
    'D': {'A': 4, 'B': 2, 'C': 5}
}
a = dijkstra_shortest_path(graph, 'A', 'D')
print(a)

//Ram
import heapq

def dijkstra(graph, start):
    distances = {router: float('inf') for router in graph}
    distances[start] = 0
    pq = [(0, start)]
    prev = {}

    while pq:
        # Get the router with the smallest distance from the priority queue
        dist, current_router = heapq.heappop(pq)

        # Check if this is a new shortest path to the current router
        if dist > distances[current_router]:
            continue

        # Iterate over neighbors of the current router
        for neighbor, weight in graph[current_router].items():
            # Compute the distance to the neighbor through the current router
            distance = dist + weight

            # Check if this path to the neighbor is shorter than any previous paths
            if distance < distances[neighbor]:
                # Update the distance to the neighbor and add it to the priority queue
                distances[neighbor] = distance
                heapq.heappush(pq, (distance, neighbor))
                # Update the previous node in the shortest path
                prev[neighbor] = current_router

    # Return the distances and previous nodes in the shortest path as dictionaries
    return distances, prev

# Example usage
graph = {
    '1': {'2': 5, '4': 6},
    '2': {'3': 8, '5': 9, '6': 8},
    '3': {'2': 8, '5': 6, '8': 15},
    '4': {'1': 6, '6': 4, '7': 9},
    '5': {'2': 9, '3': 6, '9': 13},
    '6': {'4': 4, '8': 14, '2': 8, '7': 6},
    '7': {'4': 9, '6': 6, '9': 11},
    '8': {'3': 15, '6': 14, '10': 9},
    '9': {'5': 13, '7': 11, '10': 6, '11': 5, '12': 12},
    '10': {'8': 9, '9': 6},
    '11': {'9': 5},
    '12': {'9': 12}
}

start = '1'
distances, prev = dijkstra(graph, start)

print(f"Shortest path from {start} to each router:")
for router in graph:
    path = []
    current = router
    while current != start:
        path.insert(0, current)
        current = prev[current]
    path.insert(0, start)
    print(f"{router}: {' -> '.join(path)}, distance {distances[router]}")
